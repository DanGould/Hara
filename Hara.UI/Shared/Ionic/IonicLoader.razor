@inject IJSRuntime JsRuntime
@code {
    private DotNetObjectReference<IonicLoader> _thisRef;
    private bool _realVisible;
    private bool _visible;
    private readonly Queue<Func<Task>> _renderActions = new Queue<Func<Task>>();
    
    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object> InputAttributes { get; set; }
    
    [Parameter]
    public EventCallback Dismissed { get; set; }
    [Parameter]
    public EventCallback Presented { get; set; }

    private string Id;

    [Parameter]
    public bool Visible
    {
        get => _visible;
        set
        {
            if (_realVisible != value)
            {
                if(value)
                {
                    Id = Guid.NewGuid().ToString();
                    _renderActions.Enqueue(async () =>
                    {
                        await JsRuntime.InvokeVoidAsync("createElement", "ion-loading", Id, InputAttributes);
                        await RegisterEventHandlers();
                    });
                }
                
                _renderActions.Enqueue(async () =>
                {
                    await JsRuntime.InvokeVoidAsync("executeFunctionByName", Id, value ? "present" : "dismiss");
                });
            }
            _visible = value;
        }
    }
    [Parameter]
    public EventCallback<bool> VisibleChanged { get; set; }

    [JSInvokable(nameof(HandleDismissed))]
    public async Task HandleDismissed()
    {
        _realVisible = false;
        await Dismissed.InvokeAsync(null);
        await VisibleChanged.InvokeAsync(_realVisible);
    }

    [JSInvokable(nameof(HandlePresented))]
    public async Task HandlePresented()
    {
        _realVisible = true;
        await Presented.InvokeAsync(null);
        await VisibleChanged.InvokeAsync(_realVisible);
    }

    private async Task RegisterEventHandlers()
    {
        await JsRuntime.InvokeVoidAsync("registerBlazorCustomHandler", Id, "ionLoadingDidDismiss", _thisRef, nameof(HandleDismissed));
        await JsRuntime.InvokeVoidAsync("registerBlazorCustomHandler", Id, "ionLoadingDidPresent", _thisRef, nameof(HandlePresented));
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _thisRef = DotNetObjectReference.Create(this);
        }
        while (_renderActions.Any())
        {
            await _renderActions.Dequeue().Invoke();
        }
        await  base.OnAfterRenderAsync(firstRender);
    }

}