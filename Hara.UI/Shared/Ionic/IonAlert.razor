@inject IJSRuntime JsRuntime
@using System.Text.Json.Serialization
@using System.Text.Json
@inherits IonLoading

@code {

    [Parameter]
    public IEnumerable<IonAlertButton> Buttons { get; set; }

    [Parameter]
    public IEnumerable<IonAlertInput> Inputs { get; set; }

    protected override async Task CreateElement()
    {
        var data = new Dictionary<string, object>();
        if (Buttons?.Any() is true)
        {
            data.Add("buttons", Buttons);
        }
        if (Inputs?.Any() is true)
        {
            data.Add("inputs", Inputs);
        }
        await JsRuntime.InvokeVoidAsync("createElement", "ion-alert", Id, InputAttributes, data);
        if (Buttons?.Any() is true)
        {
            for (int i = 0; i < Buttons.Count(); i++)
            {
                if (Buttons.ElementAt(i).Handler != null)
                {
                    await JsRuntime.InvokeVoidAsync("setWebComponentPropertyWithCallback", Id, $"buttons[{i}].handler", _thisRef, nameof(HandleButton), i);
                }
            }
        }
        if (Inputs?.Any() is true)
        {
            for (int i = 0; i < Inputs.Count(); i++)
            {
                if (Inputs.ElementAt(i).Handler != null)
                {
                    await JsRuntime.InvokeVoidAsync("setWebComponentPropertyWithCallback", Id, $"inputs[{i}].handler", _thisRef, nameof(HandleInput), i);
                }
            }
        }
        await JsRuntime.InvokeVoidAsync("registerBlazorCustomHandler", Id, "ionAlertDidDismiss", _thisRef, nameof(HandleDismissed));
        await JsRuntime.InvokeVoidAsync("registerBlazorCustomHandler", Id, "ionAlertDidPresent", _thisRef, nameof(HandlePresented));
    }


    [JSInvokable(nameof(HandleButton))]
    public Task HandleButton(object data, int id)
    {
        
        return Buttons.ElementAt(id).Handler(ParseData(data));
    }


    [JSInvokable(nameof(HandleInput))]
    public Task HandleInput(object data, int id)
    {
        return Inputs.ElementAt(id).Handler(data);
    }


    [JSInvokable(nameof(HandlePresented))]
    public override Task HandlePresented(object data)
    {
        return base.HandlePresented(ParseData(data));
    }

    [JSInvokable(nameof(HandleDismissed))]
    public override Task HandleDismissed(object data)
    {
        return base.HandleDismissed(ParseData(data));
    }

    private IonAlertButtonHandlerData ParseData(object obj)
    {
        if (obj is JsonElement element)
        {
            var children = element.EnumerateObject();
            if(children.Any())
                return JsonSerializer.Deserialize<IonAlertButtonHandlerData>(element.EnumerateObject().First().Value.GetRawText());
        }
        return new IonAlertButtonHandlerData();
    }

    public class IonAlertButtonHandlerData
    {
        [JsonExtensionData]
        public Dictionary<string, object> Options { get; set; }
    }
    
    public class IonAlertButton
    {
        [JsonExtensionData]
        public Dictionary<string, object> Options { get; set; }
        [JsonIgnore]
        public Func<IonAlertButtonHandlerData, Task> Handler { get; set; }
    }

    public class IonAlertInput
    {
        [JsonExtensionData]
        public Dictionary<string, object> Options { get; set; }
        [JsonIgnore]
        public Func<object, Task> Handler { get; set; }
    }

}