@page "/counter"
@inject ICounterState CounterState
@inject UIStateService UiStateService
@using Hara.Abstractions.Contracts
@using Hara.UI.Services
@implements IDisposable


<section>

    <p>Current Counter: @CounterState.CurrentCount</p>
    <ion-button @onclick="CounterState.IncrementCount" expand="block">Increase Counter</ion-button>

    <ion-button @onclick="ToggleLoader" expand="block">Toggle loader (currently @VisibleLoader)</ion-button>
    <ion-button @onclick="ToggleAlert" expand="block">Toggle alert (currently @VisibleAlert)</ion-button>
    <ion-list>
        @foreach (var log in Logs)
        {
            <ion-item>
                <ion-label>
                    @log
                </ion-label>
            </ion-item>
        }
    </ion-list>
</section>

<IonLoading @bind-Visible="@VisibleLoader" message="eeee" backdrop-dismiss="true"></IonLoading>
<IonAlert @bind-Visible="@VisibleAlert" message="eeee" buttons="@buttons" inputs="@inputs" backdrop-dismiss="true"></IonAlert>

@code {

    public IonAlert.IonAlertButton[] buttons;
    public IonAlert.IonAlertInput[] inputs;
    public List<string> Logs = new List<string>();
    private bool _visibleAlert;
    private bool _visibleLoader;

    public bool VisibleLoader
    {
        get => _visibleLoader;
        set
        {
            Logs.Add($"VisibleLoaderChanged {value}");
            _visibleLoader = value;
        }
    }

    public bool VisibleAlert
    {
        get => _visibleAlert;
        set
        {
            Logs.Add($"VisibleAlertChanged {value}");
            _visibleAlert = value;
        }
    }

    protected override void OnInitialized()
    {
        UiStateService.StateChanged += StateHasChanged;
        CounterState.StateChanged += StateHasChanged;
        UiStateService.PageTitle = "Counter";
        buttons = new[]
        {
            new IonAlert.IonAlertButton()
            {
                Options = new Dictionary<string, object>()
                {
                    {"text", "a button!"}
                },
                Handler = o =>
                {
                    var vals = string.Join(",", o.Options.Select(pair => $"{pair.Key}={pair.Value}").ToArray());
                    Logs.Add($"1st option clicked! {(vals)}" );
                    return Task.CompletedTask;
                }
            },
            new IonAlert.IonAlertButton()
            {
                Options = new Dictionary<string, object>()
                {
                    {"text", "Cancel"},
                    {"role", "cancel"}
                },
                Handler = o =>
                {
                    var vals = string.Join(",", o.Options.Select(pair => $"{pair.Key}={pair.Value}").ToArray());
                    Logs.Add($"cancel clicked! {vals}" );
                    return Task.CompletedTask;
                }
            }
        };
        inputs = new[]
        {
            new IonAlert.IonAlertInput()
            {
                Options = new Dictionary<string, object>()
                {
                    {"type", "text"},
                    {"label", "Please tell us about yourself"},
                    {"placeholder", "14/f/cali"},
                    {"name", "personalDescription"},
                    {"id", "alert-personalDescription"}
                }
            }
        };
        StateHasChanged();
    }

    public void Dispose()
    {
        CounterState.StateChanged -= StateHasChanged;
        UiStateService.StateChanged -= StateHasChanged;
    }

    private void ToggleLoader()
    {
        VisibleLoader = !VisibleLoader;
    }

    private void ToggleAlert()
    {
        VisibleAlert = !VisibleAlert;
    }

}